package com.company;

import java.math.BigInteger;
import java.util.Collections;
import java.util.HashMap;

public class Main {

    //If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
    //
    //Find the sum of all the multiples of 3 or 5 below 1000.
    static void problem01(){
    int sum=0;
        for(int i=0; i<1000; i++){
            if(i%3==0 || i%5==0){
                sum=sum+i;
            }
        }
        System.out.println("Problem 1: "+sum);
    }
    //Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    //
    //1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    //
    //By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    static int recursiveFibonacci(int n){
      if(n<2){
        return 1;
      }else{
          return recursiveFibonacci(n-1)+recursiveFibonacci(n-2);
      }
    }
    static void problem02() {
        int i = 1;
        int sum = 0;
        do {
            i++;
            if (recursiveFibonacci(i) % 2 == 0)
                sum = sum + recursiveFibonacci(i);
        } while (recursiveFibonacci(i) < 4_000_000);
        System.out.println("Problem 2: " + sum);
    }
    //The prime factors of 13195 are 5, 7, 13 and 29.
    //
    //What is the largest prime factor of the number 600851475143 ?
    static long problem03(){
        long n=600851475143L;
        for(long i=2;i<n ;++i)
        {
            while(n % i==0)
            {
                n=n/i;
            }
        }
        return n;
    }
    //A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
    //
    //Find the largest palindrome made from the product of two 3-digit numbers.
    static int problem04() {
        String multip;
        int max=0;
        for(int i=999; i>=100; i--){
            for(int j=999; j>=100; j--){
                    multip=Integer.toString(i*j);
                    if(multip.length()==6){
                        if((multip.charAt(0)==multip.charAt(multip.length()-1))
                                && (multip.charAt(1)==multip.charAt(multip.length()-2))
                                && (multip.charAt(2)==multip.charAt(multip.length()-3))){
                            if(max<Integer.valueOf(multip)) {
                                max = Integer.valueOf(multip);
                            }
                        }
                    }
            }
        }
        return max;
    }
    //2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
    //
    //What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
    static long problem05() {
        for(long i=1; i<Long.MAX_VALUE; i++){
            for(long j=1; j<=20; j++){
                if(i%j!=0){
                    break;
                }
                if(j==20){
                    return i;
                }
            }
        }
        return 0L;
    }
    //    The sum of the squares of the first ten natural numbers is,
    //
    //12+22+...+102=385
    //The square of the sum of the first ten natural numbers is,
    //
    //(1+2+...+10)2=552=3025
    //Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025−385=2640.
    //
    //Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
    static long problem06() {
        long sumOfSquares=0;
        long squaresOfSum=0;
        for(int i=1; i<=100; i++){
         sumOfSquares=sumOfSquares+(long)Math.pow(i, 2);

        }
        for(int i=1; i<=100; i++){
            squaresOfSum=squaresOfSum+i;
        }

        return (long)Math.pow(squaresOfSum,2)-sumOfSquares;
    }
    //By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
    //
    //What is the 10 001st prime number?
    static long problem07(){
        int m;
        int counter=2;
        boolean flag=false;
        for(int i=3; i<Integer.MAX_VALUE; i++){
            m=i/2;
            flag=false;
            for(int j=2; j<=m;j++){
                if(i%j==0){
                    flag=false;
                    break;
                }
                flag=true;
            }
            if(flag){
                counter++;
                if(counter==10_001){
                    System.out.println(counter);
                    return i;
                }
            }
        }
        return 0;
    }
    //Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
    static BigInteger problem08(){
        String input=  "73167176531330624919225119674426574742355349194934" +
                        "96983520312774506326239578318016984801869478851843" +
                        "85861560789112949495459501737958331952853208805511" +
                        "12540698747158523863050715693290963295227443043557" +
                        "66896648950445244523161731856403098711121722383113" +
                        "62229893423380308135336276614282806444486645238749" +
                        "30358907296290491560440772390713810515859307960866" +
                        "70172427121883998797908792274921901699720888093776" +
                        "65727333001053367881220235421809751254540594752243" +
                        "52584907711670556013604839586446706324415722155397" +
                        "53697817977846174064955149290862569321978468622482" +
                        "83972241375657056057490261407972968652414535100474" +
                        "82166370484403199890008895243450658541227588666881" +
                        "16427171479924442928230863465674813919123162824586" +
                        "17866458359124566529476545682848912883142607690042" +
                        "24219022671055626321111109370544217506941658960408" +
                        "07198403850962455444362981230987879927244284909188" +
                        "84580156166097919133875499200524063689912560717606" +
                        "05886116467109405077541002256983155200055935729725" +
                        "71636269561882670428252483600823257530420752963450";
        String []series = input.split("");
        HashMap<String, BigInteger> map = new HashMap<>();
        String digits="";
        BigInteger product=new BigInteger("1");
        for(int i=0; i<series.length-13; i++){
            for(int j=i; j<i+13; j++){
                 digits=digits+series[j];
                 product=product.multiply(new BigInteger(series[j]));
            }
            map.put(digits, product);
            product=new BigInteger("1");
            digits="";
        }

    return Collections.max(map.values());
    }

    public static void main(String[] args) {
        //problem01();
        //problem02();
        //System.out.println(problem03());
        //System.out.println(problem04());
        //System.out.println(problem05());
        //System.out.println(problem06());
        //System.out.println(problem07());
        //System.out.println(problem08());
    }
}
