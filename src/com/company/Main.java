package com.company;

public class Main {

    //If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
    //
    //Find the sum of all the multiples of 3 or 5 below 1000.
    static void problem01(){
    int sum=0;
        for(int i=0; i<1000; i++){
            if(i%3==0 || i%5==0){
                sum=sum+i;
            }
        }
        System.out.println("Problem 1: "+sum);
    }
    //Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    //
    //1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    //
    //By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    static int recursiveFibonacci(int n){
      if(n<2){
        return 1;
      }else{
          return recursiveFibonacci(n-1)+recursiveFibonacci(n-2);
      }
    }
    static void problem02() {
        int i = 1;
        int sum = 0;
        do {
            i++;
            if (recursiveFibonacci(i) % 2 == 0)
                sum = sum + recursiveFibonacci(i);
        } while (recursiveFibonacci(i) < 4_000_000);
        System.out.println("Problem 2: " + sum);
    }
    //The prime factors of 13195 are 5, 7, 13 and 29.
    //
    //What is the largest prime factor of the number 600851475143 ?
    static long problem03(){
        long n=600851475143L;
        for(long i=2;i<n ;++i)
        {
            while(n % i==0)
            {
                n=n/i;
            }
        }
        return n;
    }

    public static void main(String[] args) {
	// write your code here
        problem01();
        problem02();
        System.out.println(problem03());
    }
}
